---
interface ClassItem {
  className: string;
  properties: string[];
}

interface AdditionalClass {
  name: string;
  value: string;
}

interface UtilityProps {
  additionalClasses?: AdditionalClass[];
  classPrefix: string;
  data?: ClassItem[];
  increment: number;
  classValues: string[];
  range: number;
  unit: string;
}

const { additionalClasses, classPrefix, data, increment, classValues, range, unit } = Astro.props as UtilityProps;

function generateClassData(
  classPrefix: string,
  classValues: string[],
  range: number,
  increment: number,
  unit: string,
  additionalClasses?: AdditionalClass[]
): ClassItem[] {
  const data: ClassItem[] = [];

  for (let i = 0; i <= range; i++) {
    const properties = classValues.map(propertyName => `${propertyName}: ${i * increment}${unit};`);
    data.push({
      className: `${classPrefix}${i}`,
      properties
    });
  }

  if (additionalClasses) {
    additionalClasses.forEach((additionalClass) => {
      const properties = classValues.map(propertyName => `${propertyName}: ${additionalClass.value};`);
      data.push({
        className: `${classPrefix}${additionalClass.name}`,
        properties
      });
    });
  }

  return data;
}

const codeData = data || generateClassData(classPrefix, classValues, range, increment, unit, additionalClasses);
---


<div class="max-h-90 ovf-y-auto mb-5">
  <table class="w-full" style="display: inline-table !important;">
    <thead>
      <tr>
        <th class="fs-md fw-600">Class</th>
        <th class="fs-md fw-600">Properties</th>
      </tr>
    </thead>
    <tbody>
      {codeData.map((classItem) => (
        <tr>
          <td class="fs-sm">
            <p class="fw-600">
              {classItem.className}
            </p>
          </td>
          <td class="fs-sm">
            <code class="tc-cyan" style="background-color: transparent !important;">
              {classItem.properties.join('\n')}
            </code>
          </td>
        </tr>
      ))}
    </tbody>
  </table>
</div>
