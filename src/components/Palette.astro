---
import tinycolor from "tinycolor2";

interface ColorItem {
  name: string;
  color: string;
}

interface PaletteProps {
  data: ColorItem[];
}

const { data } = Astro.props as PaletteProps;

const mixColors = (color1: string, color2: string, weight: number): string => {
  return tinycolor.mix(color1, color2, weight).toHexString();
};

const generateShades = (color: string): string[] => {
  const shades: string[] = [];
  for (let i = 6; i >= 1; i--) {
    shades.push(mixColors(color, "white", i * 10));
  }

  shades.push(color);
  for (let i = 1; i <= 6; i++) {
    shades.push(mixColors(color, "black", i * 10));
  }

  return shades;
};
---

<style>
.colorSwatch {
  border-radius: 0.25rem;
  height: 40px;
  width: 80px;
}

.colorLine {
  align-items: end;
  display: flex;
  gap: 0.45rem;
}

.colorLineTitle {
  font-weight: 600;
  margin-top: 2rem;
}

@media (max-width: 800px) {
  .colorLine {
    align-items: flex-start;
    flex-direction: column;
  }

  .colorSwatch {
    margin-bottom: 10px;
    width: 100%;
  }
}
</style>

<div>
  {data.map((colorItem) => {
    const shades = generateShades(colorItem.color);
    return (
      <div style="width: 100%;">
        <div class="colorLineTitle">{colorItem.name}</div>
        <div class="colorLine">
          {shades.map((v) => (
            <div class="colorSwatch" style={`background-color: ${v}`}></div>
          ))}
        </div>
      </div>
    );
  })}
</div>
