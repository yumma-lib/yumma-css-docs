---
import tinycolor from "tinycolor2";

interface ColorClass {
  color: string;
  value: string;
}

interface ColorProps {
  classPrefix: string;
  classValues: string[];
  data: ColorClass[];
}

const { classPrefix, classValues, data } = Astro.props as ColorProps;

const mixColors = (color1: string, color2: string, weight: number): string => {
  return tinycolor.mix(color1, color2, weight).toHexString();
};

const generateShades = (color: string) => {
  const lightShades: string[] = [];
  const darkShades: string[] = [];

  for (let i = 6; i >= 1; i--) {
    lightShades.push(mixColors(color, "white", i * 10));
  }

  const baseColor = color;

  for (let i = 1; i <= 6; i++) {
    darkShades.push(mixColors(color, "black", i * 10));
  }

  return { lightShades, baseColor, darkShades };
};

function generateClassData(
  classPrefix: string,
  classValues: string[],
  data: ColorClass[]
) {
  return data.flatMap((colorClass) => {
    const { lightShades, baseColor, darkShades } = generateShades(
      colorClass.value
    );

    return [
      ...lightShades.map((shade, i) => ({
        classTitle: `${classPrefix}l-${colorClass.color}-${6 - i}`,
        properties: classValues.map(
          (propertyName) => `${propertyName}: ${shade};`
        ),
        colorValue: shade,
      })),
      {
        classTitle: `${classPrefix}${colorClass.color}`,
        properties: classValues.map(
          (propertyName) => `${propertyName}: ${baseColor};`
        ),
        colorValue: baseColor,
      },
      ...darkShades.map((shade, i) => ({
        classTitle: `${classPrefix}d-${colorClass.color}-${i + 1}`,
        properties: classValues.map(
          (propertyName) => `${propertyName}: ${shade};`
        ),
        colorValue: shade,
      })),
    ];
  });
}

const colorData = generateClassData(classPrefix, classValues, data);
---

<style>
  :global([data-theme='dark']) table {
    background-color: var(--yma-bg-lighter);
  }

  :global([data-theme='dark']) th, :global([data-theme='dark']) td {
    background-color: var(--yma-bg-light);
    color: var(--yma-bg-lighter);
  }

  :global([data-theme='dark']) td {
    border-color: #2d2f33;
  }
</style>

<div class="max-h-90 ovf-y-auto mb-5">
  <table class="w-full" style="display: inline-table !important;">
    <thead>
      <tr>
        <th class="fs-xs">Class</th>
        <th class="fs-xs">Properties</th>
        <th class="fs-xs">Color</th>
      </tr>
    </thead>
    <tbody>
      {colorData.map((classItem) => (
        <tr>
          <td class="fs-sm">
            <p>{classItem.classTitle}</p>
          </td>
          <td class="fs-sm">
            <code style="background-color: transparent !important;">
              {classItem.properties.join('\n')}
            </code>
          </td>
          <td class="fs-sm">
            <div
              class="h-5 w-half rad-0"
              style={`background-color: ${classItem.colorValue}`}
            />
          </td>
        </tr>
      ))}
    </tbody>
  </table>
</div>
